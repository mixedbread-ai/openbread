#!/usr/bin/env bash
set -exuo pipefail

cd "$(dirname "$0")"

# Clean and create dist directory
rm -rf dist
mkdir dist

# Copy src to dist/src and build from dist/src into dist, so that
# the source map for index.js.map will refer to ./src/index.ts etc
cp -rp src README.md dist

# Copy LICENSE from root if it exists
for file in LICENSE; do
  if [ -e "../../${file}" ]; then cp "../../${file}" dist; fi
done

# Copy CHANGELOG if it exists locally
for file in CHANGELOG.md; do
  if [ -e "${file}" ]; then cp "${file}" dist; fi
done

# Create package.json for publishing from dist
node -e "
const pkg = require('./package.json');
// Fix paths for publishing from dist
if (pkg.bin && pkg.bin['mcp-server']) {
  pkg.bin['mcp-server'] = pkg.bin['mcp-server'].replace('dist/', '');
}
pkg.main = pkg.main.replace('dist/', '');
pkg.types = pkg.types.replace('dist/', '');
// Update files array to include actual files
pkg.files = ['*.js', '*.mjs', '*.d.ts', 'README.md', 'LICENSE', 'CHANGELOG.md'];
// Remove dev dependencies
delete pkg.devDependencies;
// Remove scripts that prevent publishing
delete pkg.scripts.prepublishOnly;
delete pkg.scripts.prepack;
// Fix exports paths
if (pkg.exports) {
  for (const key in pkg.exports) {
    if (typeof pkg.exports[key] === 'object') {
      for (const subKey in pkg.exports[key]) {
        if (typeof pkg.exports[key][subKey] === 'string') {
          pkg.exports[key][subKey] = pkg.exports[key][subKey].replace('./dist/', './');
        }
      }
    } else if (typeof pkg.exports[key] === 'string') {
      pkg.exports[key] = pkg.exports[key].replace('./dist/', './');
    }
  }
}
console.log(JSON.stringify(pkg, null, 2));
" > dist/package.json

# Build to .js/.mjs/.d.ts files using tsc-multi
./node_modules/.bin/tsc-multi

cp tsconfig.dist-src.json dist/src/tsconfig.json

# Ensure the server binary has proper shebang line
if [ -f "dist/index.js" ]; then
    # Add shebang if not present
    if ! head -n 1 dist/index.js | grep -q "^#!/usr/bin/env node"; then
        echo '#!/usr/bin/env node' | cat - dist/index.js > temp && mv temp dist/index.js
    fi
    # Make the server executable
    chmod +x dist/index.js
fi

# Run postprocess-files script if available
if [ -f "../../scripts/utils/postprocess-files.cjs" ]; then
    DIST_PATH=./dist PKG_IMPORT_PATH=@mixedbread/mcp/ node ../../scripts/utils/postprocess-files.cjs
fi

# Verify the build output
if [ -f "dist/index.js" ]; then
    echo "Build successful: MCP server created at dist/index.js"
else
    echo "Build error: MCP server not found"
    exit 1
fi